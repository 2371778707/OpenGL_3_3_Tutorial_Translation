<!DOCTYPE html>
<!-- saved from url=(0078)http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/ -->
<html dir="ltr" lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/menu150.js"></script><script src="./Tutorial 17   Rotations   opengl-tutorial.org_files/cb=gapi.loaded_0" async=""></script><script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/plusone.js" gapi_processed="true"></script><link rel="stylesheet" type="text/css" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/widget113.css" media="all">
<meta charset="UTF-8">
<title>Tutorial 17 : Rotations | opengl-tutorial.org</title>

<link rel="stylesheet" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/language-selector.css" type="text/css" media="all">
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="stylesheet" type="text/css" media="all" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/style.css">
<link rel="pingback" href="http://www.opengl-tutorial.org/xmlrpc.php">
<link rel="alternate" type="application/rss+xml" title="opengl-tutorial.org » Feed" href="http://www.opengl-tutorial.org/feed/">
<link rel="alternate" type="application/rss+xml" title="opengl-tutorial.org » Comments Feed" href="http://www.opengl-tutorial.org/comments/feed/">
<link rel="stylesheet" id="thickbox.css-css" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/thickbox.css" type="text/css" media="all">
<link rel="stylesheet" id="jquery-toc-css" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/jquery-toc.css" type="text/css" media="all">
<script type="text/javascript" async="" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/ga.js"></script><script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/jquery.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var jQueryTOC = {"source_selector":".single .entry","header_tag":"h2","output_id":"jquery_toc","output_title":"On this page:"};
/* ]]> */
</script>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/jquery-toc.js"></script>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/comment-reply.js"></script>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/external-tracking.min.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.opengl-tutorial.org/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.opengl-tutorial.org/wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress 3.4.2">
<link rel="canonical" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/Tutorial 17   Rotations   opengl-tutorial.org.htm">
			<!-- Last Modified Footer -->
				<style type="text/css" media="screen">p.lmf_generated_text { color: #A0A0A0; }</style>			<!-- /Last Modified Footer -->
			<script type="text/javascript">var icl_lang = 'en';var icl_home = 'http://www.opengl-tutorial.org/';</script>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/sitepress.js"></script>
<meta name="generator" content="WPML ver:2.0.4.1 stt:1,61,4,3,2,54;0;0;0">
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/shCore.js"></script>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/shAutoloader.js"></script>
<link type="text/css" rel="stylesheet" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/shCore.css">
<link type="text/css" rel="stylesheet" href="./Tutorial 17   Rotations   opengl-tutorial.org_files/shThemeDefault.css">
<style type="text/css">.broken_link, a.broken_link {
	text-decoration: line-through;
}</style><style type="text/css" id="custom-background-css">
body.custom-background { background-color: #1F1F1F; }
</style>
<!-- Google Analytics Tracking by Google Analyticator 6.3.4: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = ['zip'];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-22633480-2']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<div style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000;" id="_atssh"><iframe id="_atssh289" title="AddThis utility frame" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border: 0px; left: 0px; top: 0px;" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/sh114.htm"></iframe></div><script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/core074.js"></script><script type="text/javascript" src="chrome-extension://bfbmjmiodbnnpllbbbfblcplfjjepjdn/js/injected.js"></script></head>

<body class="page page-id-569 page-child parent-pageid-140 page-template-default custom-background">
<div id="wrapper" class="hfeed">
	<div id="header">
		<div id="masthead">
			<div id="branding" role="banner">
								<div id="site-title">
					<span>
						<!--a href="http://www.opengl-tutorial.org/" title="opengl-tutorial.org" rel="home">opengl-tutorial.org</a-->
					</span>
				</div>
				<div id="site-description">Tutorials for modern OpenGL (3.3+)</div>

										<img src="./Tutorial 17   Rotations   opengl-tutorial.org_files/blue_bubbles.png" width="940" height="100" alt="">
										<div class="clear"></div>
			</div><!-- #branding -->
<div class="clear"></div>
			<div id="access" role="navigation">
			  				<div class="skip-link screen-reader-text"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#content" title="Skip to content">Skip to content</a></div>
								<div class="menu"><ul><li><a href="http://www.opengl-tutorial.org/" title="Home">Home</a></li><li class="page_item page-item-138"><a href="http://www.opengl-tutorial.org/beginners-tutorials/">Basic OpenGL</a><ul class="children"><li class="page_item page-item-7"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-1-opening-a-window/">Tutorial 1 : Opening a window</a></li><li class="page_item page-item-14"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-2-the-first-triangle/">Tutorial 2 : The first triangle</a></li><li class="page_item page-item-19"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/">Tutorial 3 : Matrices</a></li><li class="page_item page-item-82"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-4-a-colored-cube/">Tutorial 4 : A Colored Cube</a></li><li class="page_item page-item-83"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-5-a-textured-cube/">Tutorial 5 : A Textured Cube</a></li><li class="page_item page-item-170"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-6-keyboard-and-mouse/">Tutorial 6 : Keyboard and Mouse</a></li><li class="page_item page-item-185"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-7-model-loading/">Tutorial 7 : Model loading</a></li><li class="page_item page-item-198"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-8-basic-shading/">Tutorial 8 : Basic shading</a></li></ul></li><li class="page_item page-item-140 current_page_ancestor current_page_parent"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/">Intermediate Tutorials</a><ul class="children"><li class="page_item page-item-252"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-9-vbo-indexing/">Tutorial 9 : VBO Indexing</a></li><li class="page_item page-item-281"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-10-transparency/">Tutorial 10 : Transparency</a></li><li class="page_item page-item-291"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-11-2d-text/">Tutorial 11 : 2D text</a></li><li class="page_item page-item-323"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-12-opengl-extensions/">Tutorial 12 : OpenGL Extensions</a></li><li class="page_item page-item-301"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/">Tutorial 13 : Normal Mapping</a></li><li class="page_item page-item-311"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-14-render-to-texture/">Tutorial 14 : Render To Texture</a></li><li class="page_item page-item-344"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-15-lightmaps/">Tutorial 15 : Lightmaps</a></li><li class="page_item page-item-381"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/">Tutorial 16 : Shadow mapping</a></li><li class="page_item page-item-569 current_page_item"><a href="./Tutorial 17   Rotations   opengl-tutorial.org_files/Tutorial 17   Rotations   opengl-tutorial.org.htm">Tutorial 17 : Rotations</a></li></ul></li><li class="page_item page-item-167"><a href="http://www.opengl-tutorial.org/miscellaneous/">Miscellaneous</a><ul class="children"><li class="page_item page-item-526"><a href="http://www.opengl-tutorial.org/miscellaneous/faq/">FAQ</a></li><li class="page_item page-item-209"><a href="http://www.opengl-tutorial.org/miscellaneous/math-cheatsheet/">Math Cheatsheet</a></li><li class="page_item page-item-210"><a href="http://www.opengl-tutorial.org/miscellaneous/useful-tools-links/">Useful Tools &amp; Links</a></li><li class="page_item page-item-436"><a href="http://www.opengl-tutorial.org/miscellaneous/an-fps-counter/">An FPS counter</a></li><li class="page_item page-item-587"><a href="http://www.opengl-tutorial.org/miscellaneous/building-your-own-c-application/">Building your own C application</a></li></ul></li><li class="page_item page-item-200"><a href="http://www.opengl-tutorial.org/download/">Download</a></li></ul></div>
			</div><!-- #access -->
		</div><!-- #masthead -->
	</div><!-- #header -->

	<div id="main">
<p style="color:red;font-size:18px">Mac OS 10.8 users, the 17th tutorial compiles again ! (But you have to update XCode)</p>
		<div id="container">
			<div id="content" role="main">

			

				<div id="post-569" class="post-569 page type-page status-publish hentry">
											<h1 class="entry-title">第十七课：旋转Tutorial 17 : Rotations</h1>
					
					<div class="entry-content"><div id="jquery_toc"><a name="top"></a><p></p><ul><li style="margin-left:0px;"><a title="Jump to Foreword: rotation VS orientation" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#Foreword__rotation_VS_orientation">前言：旋转 vs. 朝向Foreword: rotation VS orientation</a></li><li style="margin-left:0px;"><a title="Jump to Euler Angles" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#Euler_Angles">欧拉角Euler Angles</a></li><li style="margin-left:0px;"><a title="Jump to Quaternions" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#Quaternions">四元数Quaternions</a></li><li style="margin-left:30px;"><a title="Jump to Reading quaternions" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#Reading_quaternions">看懂四元数Reading quaternions</a></li><li style="margin-left:30px;"><a title="Jump to Basic operations" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#Basic_operations">基本操作Basic operations</a></li><li style="margin-left:60px;"><a title="Jump to How do I create a quaternion in C++ ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_create_a_quaternion_in_C____">怎样在C++中创建四元数？How do I create a quaternion in C++ ?</a></li><li style="margin-left:60px;"><a title="Jump to How do I create a quaternion in GLSL ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_create_a_quaternion_in_GLSL__">怎样在GLSL中创建四元数？How do I create a quaternion in GLSL ?</a></li><li style="margin-left:60px;"><a title="Jump to How do I convert a quaternion to a matrix ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_convert_a_quaternion_to_a_matrix__">怎样把四元数转换为矩阵？How do I convert a quaternion to a matrix ?</a></li><li style="margin-left:60px;"><a title="Jump to " href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#"></a></li><li style="margin-left:0px;"><a title="Jump to So, which one should I choose ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#So__which_one_should_I_choose__">那究竟该用哪一个呢？So, which one should I choose ?</a></li><li style="margin-left:0px;"><a title="Jump to Other resources" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#Other_resources">其他资源Other resources</a></li><li style="margin-left:0px;"><a title="Jump to Cheat-sheet" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#Cheat_sheet">速查手册Cheat-sheet</a></li><li style="margin-left:30px;"><a title="Jump to How do I apply a rotation to a point ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_apply_a_rotation_to_a_point__">怎样旋转一个点？How do I apply a rotation to a point ?</a></li><li style="margin-left:30px;"><a title="Jump to How do I interpolate between 2 quaternions ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_interpolate_between_2_quaternions__">怎样对两个四元数插值？How do I interpolate between 2 quaternions ?</a></li><li style="margin-left:30px;"><a title="Jump to How do I cumulate 2 rotations ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_cumulate_2_rotations__">怎样累积两个旋转？How do I cumulate 2 rotations ?</a></li><li style="margin-left:30px;"><a title="Jump to How do I find the rotation between 2 vectors ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_find_the_rotation_between_2_vectors__">怎样计算两向量之间的旋转量？How do I find the rotation between 2 vectors ?</a></li><li style="margin-left:30px;"><a title="Jump to I need an equivalent of gluLookAt. How do I orient an object towards a point ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#I_need_an_equivalent_of_gluLookAt__How_do_I_orient_an_object_towards_a_point__">我需要一个类似gluLookAt的函数。怎样旋转物体使之朝向某点？I need an equivalent of gluLookAt. How do I orient an object towards a point ?</a></li><li style="margin-left:30px;"><a title="Jump to How do I use LookAt, but limit the rotation at a certain speed ?" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_use_LookAt__but_limit_the_rotation_at_a_certain_speed__">怎样使用LookAt且限制旋转速度？How do I use LookAt, but limit the rotation at a certain speed ?</a></li><li style="margin-left:30px;"><a title="Jump to How do I…" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#How_do_I_">怎样……How do I…</a></li></ul></div>
						<p>本课内容有点超出OpenGL的范畴，不过倒是解决了一个非常普遍的问题：怎样表示旋转？This tutorial goes a bit outside the scope of OpenGL, but nevertheless tackles a very common problem: how to represent rotations ?</p>
<p>第三课：矩阵中，我们知道矩阵可以将点绕某个轴旋转。矩阵可以简洁地表示顶点的变换，但处理起来难度较大：例如，从最终结果中获取旋转轴就很麻烦。In Tutorial 3 – Matrices, we learnt that matrices are able to rotate a point around a specific axis. While matrices are a neat way to transform vertices, handling matrices is difficult: for instance, getting the rotation axis from the final matrix is quite tricky.</p>
<p>本课将展示两种最常见的表示旋转的方法：欧拉角和四元数。最重要的是，本课会详细解释为何要尽可能地使用四元数。We will present the two most common ways to represent rotation: Euler angles and Quaternions. Most importantly, we will explain why you should probably use Quaternions.</p>
<p><a href="http://www.opengl-tutorial.org/wp-content/uploads/2012/08/tuto17.png"><img class="alignnone size-large wp-image-786" title="tuto17" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/tuto17-1024x793.png" alt="" width="640" height="495"></a></p>
<h1 id="Foreword__rotation_VS_orientation"><a title="Back to top" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#top">前言：旋转 vs. 朝向Foreword: rotation VS orientation</a></h1>
<p>阅读有关旋转的文献时，你可能会为其中的术语感到困惑。本课中：While reading articles on rotations, you might get confused because of the vocabulary. In this tutorial:</p>
<ul>
<li>“朝向”是一种状态：该物体的朝向为……An orientation is a state: “the object’s orientation is…”</li>
<li>“旋转”是一个操作：旋转该物体A rotation is an operation: “Apply this rotation to the object”</li>
</ul>
<p>也就是说，当你实施旋转操作时，就改变了物体的朝向。That is, when you&nbsp;<em>apply a rotation</em>, you <em>change the orientation</em>. 两者形式相同，因此容易引起误解。闲话少叙，开始进入正题……Both can be represented with the same tools, which leads to the confusion. Now, let’s get started…</p>
<h1 id="Euler_Angles"><a title="Back to top" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#top">欧拉角Euler Angles</a></h1>
<p>欧拉角是表示朝向的最简方法，只需存储绕X、Y、Z轴旋转的角度，非常容易理解。你可以用vec3来存储一个欧拉角：Euler angles are the easiest way to think of an orientation. You basically store three rotations around the X, Y and Z axes. It’s a very simple concept to grasp. You can use a vec3 to store it:</p>
<div><div id="highlighter_2221" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">vec3 EulerAngles( RotationAroundXInRadians, RotationAroundYInRadians, RotationAroundZInRadians);</code></div></div></td></tr></tbody></table></div></div>
<p>这三个旋转量是依次施加的，通常的顺序是：Y-Z-X（但并不一定要按照这种顺序）。顺序不同，旋转的结果也不同。These 3 rotations are then applied successively, usually in this order: first Y, then Z, then X (but not necessarily). Using a different order yields different results.</p>
<p>欧拉角的一个简单运用就是设置人物的朝向。通常，游戏人物不会绕X和Z轴旋转，仅仅绕竖直的Y轴旋转。因此，只需维护一个绕Y轴旋转的角度即可，无需打理三个朝向。One simple use of Euler angles is setting a character’s orientation. Usually game characters do not rotate on X and Z, only on the vertical axis. Therefore, it’s easier to write, understand and maintain “float direction;” than 3 different orientations.</p>
<p>另外一个使用欧拉角的例子是FPS相机：用一个角度表示头部的平转（绕Y轴），一个角度表示俯仰（绕X轴）。参见common/controls.cpp的示例。Another good use of Euler angles is an FPS camera: you have one angle for the heading (Y), and one for up/down (X). See common/controls.cpp for an example.</p>
<p>不过，面对更加复杂的情况时，欧拉角就显得力不从心了。例如：However, when things get more complex, Euler angle will be hard to work with. For instance :</p>
<ul>
<li>很难对两个朝向进行插值。简单地对X、Y、Z角度进行插值得到的结果很不理想。Interpolating smoothly between 2 orientations is hard. Naively interpolating the X,Y and Z angles will be ugly.</li>
<li>实施多次旋转很复杂且不精确：必须计算出最终的旋转矩阵，然后据此推测书欧拉角。Applying several rotations is complicated and unprecise: you have to compute the final rotation matrix, and guess the Euler angles from this matrix</li>
<li>“臭名昭著”的“万向节死锁”问题有时会让旋转“卡死”。其他一些奇异状态还会导致模型方向翻转。A well-known problem, the “Gimbal Lock”, will sometimes block your rotations, and other singularities which will flip your model upside-down.</li>
<li>不同的角度可产生同样的旋转（例如-180°和180°）Different angles make the same rotation ( -180° and 180°, for instance )</li>
<li>繁杂不已，如上所述，一般的顺序是YZX，如果用了另外一个库，其顺序又不是YZX，那就麻烦了。It’s a mess – as said above, usually the right order is YZX, but if you also use a library with a different order, you’ll be in trouble.</li>
<li>某些操作很复杂：如绕指定的轴旋转角度N。Some operations are complicated: for instance, rotation of N degrees around a specific axis.</li>
</ul>
<p>四元数是表示旋转的好工具，可解决上述问题：Quaternions are a tool to represent rotations, which solves these problems.</p>
<h1 id="Quaternions"><a title="Back to top" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#top">四元数Quaternions</a></h1>
<p>四元数由一组4个数字[x y z w]构成，表示了如下的旋转：A quaternion is a set of 4 numbers, [x y z w], which represents rotations the following way:</p>
<div><div id="highlighter_656252" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp comments">// RotationAngle is in radians</code></div><div class="line number2 index1 alt1"><code class="cpp plain">x = RotationAxis.x * </code><code class="cpp functions bold">sin</code><code class="cpp plain">(RotationAngle / 2)</code></div><div class="line number3 index2 alt2"><code class="cpp plain">y = RotationAxis.y * </code><code class="cpp functions bold">sin</code><code class="cpp plain">(RotationAngle / 2)</code></div><div class="line number4 index3 alt1"><code class="cpp plain">z = RotationAxis.z * </code><code class="cpp functions bold">sin</code><code class="cpp plain">(RotationAngle / 2)</code></div><div class="line number5 index4 alt2"><code class="cpp plain">w = </code><code class="cpp functions bold">cos</code><code class="cpp plain">(RotationAngle / 2)</code></div></div></td></tr></tbody></table></div></div>
<p>RotationAxis，顾名思义即旋转轴。RotationAxis is, as its name implies, the axis around which you want to make your rotation.</p>
<p>RotationAngle是旋转的角度。RotationAngle is the angle of rotation around this axis.</p>
<p><a href="./Tutorial 17   Rotations   opengl-tutorial.org_files/quaternion.png"><img class="alignnone  wp-image-762 whiteborder" title="quaternion" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/quaternion.png" alt="" width="305" height="361"></a></p>
<p>因此，实际上四元数存储了一个旋转轴和一个旋转角度。这让旋转的结合变得简单了。So essentially quaternions store a <em>rotation axis</em> and a <em>rotation angle</em>, in a way that makes combining rotations easy.</p>
<h2 id="Reading_quaternions">看懂四元数Reading quaternions</h2>
<p>这种格式当然没有欧拉角那么直观了，不过仔细看还是能看明白的：xyz分量大致代表了各个轴上的旋转分量，而w=acos(旋转角度/2)。举个例子，假设你在调试器中看到了这样的值[ 0.7 0 0 0.7 ]。x=0.7，比y、z的大，因此主要是在绕X轴旋转；而2*acos(0.7) = 1.59弧度，所以旋转角度应该是90°。：This format is definitely less intuitive than Euler angles, but it’s still readable: the xyz components match roughly the rotation axis, and w is the acos of the rotation angle (divided by 2). For instance, imagine that you see the following values in the debugger: [ 0.7 0 0 0.7 ]. x=0.7, it’s bigger than y and z, so you know it’s mostly a rotation around the X axis; and 2*acos(0.7) = 1.59 radians, so it’s a rotation of 90°.</p>
<p>同理，[0 0 0 1] (w=1)表示旋转角度 = 2*acos(1) = 0，因此这是一个单位四元数，表示没有发生旋转。Similarly, [0 0 0 1] (w=1) means that angle = 2*acos(1) = 0, so this is a <em>unit quaternion</em>, which makes no rotation at all.</p>
<h2 id="Basic_operations">基本操作Basic operations</h2>
<p>了解四元数的数学原理通常用处不大：这种表示方式太晦涩了，一般通过一些便捷函数来做这些数学计算。如果对这些数学原理感兴趣，可以参考有用的工具和链接中的数学书籍。Knowing the math behind the quaternions is rarely useful: the representation is so unintuitive that you usually only rely on utility functions which do the math for you. If you’re interested, see the math books in the <a title="Useful Tools &amp; Links" href="http://www.opengl-tutorial.org/miscellaneous/useful-tools-links/">Useful Tools &amp; Links</a> page.</p>
<h3 id="How_do_I_create_a_quaternion_in_C____">怎样在C++中创建四元数？How do I create a quaternion in C++ ?</h3>
<div><div id="highlighter_878069" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp comments">// Don't forget to #include &lt;glm/gtc/quaternion.hpp&gt; and &lt;glm/gtx/quaternion.hpp&gt;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="cpp comments">// Creates an identity quaternion (no rotation)</code></div><div class="line number4 index3 alt1"><code class="cpp plain">quat MyQuaternion;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="cpp comments">// Direct specification of the 4 components</code></div><div class="line number7 index6 alt2"><code class="cpp comments">// You almost never use this directly</code></div><div class="line number8 index7 alt1"><code class="cpp plain">MyQuaternion = quat(w,x,y,z); </code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="cpp comments">// Conversion from Euler angles (in radians) to Quaternion</code></div><div class="line number11 index10 alt2"><code class="cpp plain">vec3 EulerAngles(90, 45, 0);</code></div><div class="line number12 index11 alt1"><code class="cpp plain">MyQuaternion = quat(EulerAngles);</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="cpp comments">// Conversion from axis-angle</code></div><div class="line number15 index14 alt2"><code class="cpp comments">// In GLM the angle must be in degrees here, so convert it.</code></div><div class="line number16 index15 alt1"><code class="cpp plain">MyQuaternion = gtx::quaternion::angleAxis(degrees(RotationAngle), RotationAxis);</code></div></div></td></tr></tbody></table></div></div>
<h3 id="How_do_I_create_a_quaternion_in_GLSL__">怎样在GLSL中创建四元数？How do I create a quaternion in GLSL ?</h3>
<p>不要这么干。把四元数转换为旋转矩阵，并用在模型矩阵中。顶点会一如既往地随着MVP矩阵的变化而旋转。You don’t. Convert your quaternion to a rotation matrix, and use it in the Model Matrix. Your vertices will be rotated as usual, with the MVP matrix.</p>
<p>某些情况下，你可能确实需要在GLSL中使用四元数。例如，在GPU上做骨骼动画。GLSL中没有四元数类型，但是可以将四元数存在vec4类型变量中，然后在shader中做你指定的计算。In some cases, you might actually&nbsp;want to use quaternions in GLSL, for instance if you do skeletal animation on the GPU. There is no quaternion type in GLSL, but you can pack one in a vec4, and do the math yourself in the shader.</p>
<h3 id="How_do_I_convert_a_quaternion_to_a_matrix__">怎样把四元数转换为矩阵？How do I convert a quaternion to a matrix ?</h3>
<div><div id="highlighter_515110" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">mat4 RotationMatrix = quaternion::toMat4(quaternion);</code></div></div></td></tr></tbody></table></div></div>
<p>这下可以像往常一样建立模型矩阵了:You can now use it to build your Model matrix as usual:</p>
<div><div id="highlighter_862246" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">mat4 RotationMatrix = quaternion::toMat4(quaternion);</code></div><div class="line number2 index1 alt1"><code class="cpp plain">...</code></div><div class="line number3 index2 alt2"><code class="cpp plain">mat4 ModelMatrix = TranslationMatrix * RotationMatrix * ScaleMatrix;</code></div><div class="line number4 index3 alt1"><code class="cpp comments">// You can now use ModelMatrix to build the MVP matrix</code></div></div></td></tr></tbody></table></div></div>
<h3 id=""></h3>
<h1 id="So__which_one_should_I_choose__"><a title="Back to top" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#top">那究竟该用哪一个呢？So, which one should I choose ?</a></h1>
<p>在欧拉角和四元数之间作选择还真不是件简单的事。欧拉角对于艺术家们来说显得很直观，因此，如果要做一款3D编辑器，请选用欧拉角。但对程序员来说，四元数却是最方便的。所以在写3D引擎内核时应该选用四元数。Choosing between Euler angles and quaternions is tricky. Euler angles are intuitive for artists, so if you write some 3D editor, use them. But quaternions are handy for programmers, and faster too, so you should use them in a 3D engine core.</p>
<p>一个普遍的共识是：在程序内部使用四元数，在需要和用户交互的地方就用欧拉角。The general consensus is exactly that: use quaternions internally, and expose Euler angles whenever you have some kind of user interface.</p>
<p>这样，在处理各种问题时，你才能得心应手（至少会轻松一点）。如果确有必要（如上文所述的相机，人体等等），就用欧拉角也行，只需后期做些转换工作。You will be able to handle all you will need (or at least, it will be easier), and you can still use Euler angles for entities that require it ( as said above: the camera, humanoids, and that’s pretty much it) with a simple conversion.</p>
<h1 id="Other_resources"><a title="Back to top" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#top">其他资源Other resources</a></h1>
<ol>
<li>有用的工具和链接中的书籍The books on&nbsp;<a title="Useful Tools &amp; Links" href="http://www.opengl-tutorial.org/miscellaneous/useful-tools-links/">Useful Tools &amp; Links</a>&nbsp;!</li>
<li>老是老了点，游戏编程精粹1有几篇不错的关于四元数的文章。没准儿可以在网上找到。As old as it can be, Game Programming Gems 1 has several awesome articles on quaternions. You can probably find them online too.</li>
<li>一个关于旋转的GDC报告A <a href="http://www.essentialmath.com/GDC2012/GDC2012_JMV_Rotations.pdf">GDC presentation</a> on rotations</li>
<li>The Game Programing Wiki’s <a href="http://content.gpwiki.org/index.php/OpenGL:Tutorials:Using_Quaternions_to_represent_rotation">Quaternion tutorial</a></li>
<li>Ogre3D’s <a href="http://www.ogre3d.org/tikiwiki/Quaternion+and+Rotation+Primer">FAQ on quaternions</a>. Most of the 2nd part is ogre-specific, though.</li>
<li>Ogre3D’s <a href="https://bitbucket.org/sinbad/ogre/src/3cbd67467fab3fef44d1b32bc42ccf4fb1ccfdd0/OgreMain/include/OgreVector3.h?at=default">Vector3D.h</a> and <a href="https://bitbucket.org/sinbad/ogre/src/3cbd67467fab3fef44d1b32bc42ccf4fb1ccfdd0/OgreMain/src/OgreQuaternion.cpp?at=default">Quaternion.cpp</a></li>
</ol>
<h1 id="Cheat_sheet"><a title="Back to top" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#top">速查手册Cheat-sheet</a></h1>
<p>怎样判断两个四元数是否相同？How do I know it two quaternions are similar ?</p>
<p>向量点积是两向量夹角的余弦值。若该值为1，那么这两个向量同向。When using vector, the dot product gives the cosine of the angle between these vectors. If this value is 1, then the vectors are in the same direction.</p>
<p>四元数的十分相似：With quaternions, it’s exactly the same:</p>
<div><div id="highlighter_126296" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp color1 bold">float</code> <code class="cpp plain">matching =&nbsp;quaternion::dot(q1,&nbsp;q2);</code></div><div class="line number2 index1 alt1"><code class="cpp keyword bold">if</code> <code class="cpp plain">( </code><code class="cpp functions bold">abs</code><code class="cpp plain">(matching-1.0) &lt; 0.001 ){</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// q1 and q2 are similar</code></div><div class="line number4 index3 alt1"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>求点积的acos值还可以得到q1和q2间的夹角。You can also get the angle between q1 and q2 by taking the acos() of this dot product.</p>
<h2 id="How_do_I_apply_a_rotation_to_a_point__">怎样旋转一个点？How do I apply a rotation to a point ?</h2>
<p>方法如下：You can do the following:</p>
<div><div id="highlighter_716935" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">rotated_point = orientation_quaternion *&nbsp; point;</code></div></div></td></tr></tbody></table></div></div>
<p>……但如果想计算模型矩阵，你得先将其转换为矩阵。… but if you want to compute your Model Matrix, you should probably convert it to a matrix instead.</p>
<p>注意旋转的中心始终是原点。如果想绕别的点旋转：Note that the center of rotation is always the origin. If you want to rotate around another point:</p>
<div><div id="highlighter_376897" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">rotated_point = origin + (orientation_quaternion * (point-origin));</code></div></div></td></tr></tbody></table></div></div>
<h2 id="How_do_I_interpolate_between_2_quaternions__">怎样对两个四元数插值？How do I interpolate between 2 quaternions ?</h2>
<p>SLERP意为球面线性插值（Spherical Linear intERPolation）、可以用GLM中的mix函数完成SLERP：This is called a SLERP: Spherical Linear intERPolation. With GLM, you can do this with mix:</p>
<div><div id="highlighter_201990" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">glm::quat interpolatedquat = quaternion::mix(quat1, quat2, 0.5f); </code><code class="cpp comments">// or whatever factor</code></div></div></td></tr></tbody></table></div></div>
<h2 id="How_do_I_cumulate_2_rotations__">怎样累积两个旋转？How do I cumulate 2 rotations ?</h2>
<p>简单！两个四元数相乘即可。顺序和矩阵乘法一致。亦即逆序相乘：Simple ! Just multiply the two quaternions together. The order is the same as for matrices, i.e. reverse:</p>
<div><div id="highlighter_896444" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">quat combined_rotation = second_rotation * first_rotation;</code></div></div></td></tr></tbody></table></div></div>
<h2 id="How_do_I_find_the_rotation_between_2_vectors__">怎样计算两向量之间的旋转量？How do I find the rotation between 2 vectors ?</h2>
<p>（也就是说，四元数得把v1旋转到v2的方向）(in other words: the quaternion needed to rotate v1 so that it matches v2)</p>
<p>基本思路很明了：The basic idea is straightforward:</p>
<ul>
<li>两向量间的夹角很好找：acos(点积)。The angle between the vectors is simple to find: the dot product gives its cosine.</li>
<li>旋转轴很好找：两向量的叉乘积。The needed axis is also simple to find: it’s the cross product of the two vectors.</li>
</ul>
<p>如下的算法就是遵循的上述思路，还处理了若干个特例：The following algorithm does exactly this, but also handles a number of special cases:</p>
<div><div id="highlighter_440911" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">quat&nbsp;RotationBetweenVectors(vec3&nbsp;start,&nbsp;vec3&nbsp;dest){</code></div><div class="line number2 index1 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">start&nbsp;=&nbsp;normalize(start);</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">dest&nbsp;=&nbsp;normalize(dest);</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">cosTheta&nbsp;=&nbsp;dot(start,&nbsp;dest);</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">vec3&nbsp;rotationAxis;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code>&nbsp;<code class="cpp plain">(cosTheta&nbsp;&lt;&nbsp;-1&nbsp;+&nbsp;0.001f){</code></div><div class="line number9 index8 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;special&nbsp;case&nbsp;when&nbsp;vectors&nbsp;in&nbsp;opposite&nbsp;directions:</code></div><div class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;there&nbsp;is&nbsp;no&nbsp;"ideal"&nbsp;rotation&nbsp;axis</code></div><div class="line number11 index10 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;So&nbsp;guess&nbsp;one;&nbsp;any&nbsp;will&nbsp;do&nbsp;as&nbsp;long&nbsp;as&nbsp;it's&nbsp;perpendicular&nbsp;to&nbsp;start</code></div><div class="line number12 index11 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">rotationAxis&nbsp;=&nbsp;cross(vec3(0.0f,&nbsp;0.0f,&nbsp;1.0f),&nbsp;start);</code></div><div class="line number13 index12 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code>&nbsp;<code class="cpp plain">(gtx::norm::length2(rotationAxis)&nbsp;&lt;&nbsp;0.01&nbsp;)&nbsp;</code><code class="cpp comments">//&nbsp;bad&nbsp;luck,&nbsp;they&nbsp;were&nbsp;parallel,&nbsp;try&nbsp;again!</code></div><div class="line number14 index13 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">rotationAxis&nbsp;=&nbsp;cross(vec3(1.0f,&nbsp;0.0f,&nbsp;0.0f),&nbsp;start);</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">rotationAxis&nbsp;=&nbsp;normalize(rotationAxis);</code></div><div class="line number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code>&nbsp;<code class="cpp plain">gtx::quaternion::angleAxis(180.0f,&nbsp;rotationAxis);</code></div><div class="line number18 index17 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">rotationAxis&nbsp;=&nbsp;cross(start,&nbsp;dest);</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">s&nbsp;=&nbsp;</code><code class="cpp functions bold">sqrt</code><code class="cpp plain">(&nbsp;(1+cosTheta)*2&nbsp;);</code></div><div class="line number23 index22 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">invs&nbsp;=&nbsp;1&nbsp;/&nbsp;s;</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code>&nbsp;<code class="cpp plain">quat(</code></div><div class="line number26 index25 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">s&nbsp;*&nbsp;0.5f,&nbsp;</code></div><div class="line number27 index26 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">rotationAxis.x&nbsp;*&nbsp;invs,</code></div><div class="line number28 index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">rotationAxis.y&nbsp;*&nbsp;invs,</code></div><div class="line number29 index28 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">rotationAxis.z&nbsp;*&nbsp;invs</code></div><div class="line number30 index29 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">);</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>（可在common/quaternion_utils.cpp中找到该函数）(You can find this function in common/quaternion_utils.cpp)</p>
<h2 id="I_need_an_equivalent_of_gluLookAt__How_do_I_orient_an_object_towards_a_point__">我需要一个类似gluLookAt的函数。怎样旋转物体使之朝向某点？I need an equivalent of gluLookAt. How do I orient an object towards a point ?</h2>
<p>使用函数Use&nbsp;RotationBetweenVectors !</p>
<div><div id="highlighter_127247" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp comments">//&nbsp;Find&nbsp;the&nbsp;rotation&nbsp;between&nbsp;the&nbsp;front&nbsp;of&nbsp;the&nbsp;object&nbsp;(that&nbsp;we&nbsp;assume&nbsp;towards&nbsp;+Z, </code></div><div class="line number2 index1 alt1"><code class="cpp comments">//&nbsp;but&nbsp;this&nbsp;depends&nbsp;on&nbsp;your&nbsp;model)&nbsp;and&nbsp;the&nbsp;desired&nbsp;direction </code></div><div class="line number3 index2 alt2"><code class="cpp plain">quat&nbsp;rot1&nbsp;=&nbsp;RotationBetweenVectors(vec3(0.0f,&nbsp;0.0f,&nbsp;1.0f),&nbsp;direction);</code></div></div></td></tr></tbody></table></div></div>
<p>现在，你也许想让物体保持竖直：Now, you might also want to force your object to be upright:</p>
<div><div id="highlighter_677395" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp comments">// Recompute desiredUp so that it's perpendicular to the direction</code></div><div class="line number2 index1 alt1"><code class="cpp comments">// You can skip that part if you really want to force desiredUp</code></div><div class="line number3 index2 alt2"><code class="cpp plain">vec3 right = cross(direction, desiredUp);</code></div><div class="line number4 index3 alt1"><code class="cpp plain">desiredUp = cross(right, direction);</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="cpp comments">// Because of the 1rst rotation, the up is probably completely screwed up. </code></div><div class="line number7 index6 alt2"><code class="cpp comments">// Find the rotation between the "up" of the rotated object, and the desired up</code></div><div class="line number8 index7 alt1"><code class="cpp plain">vec3 newUp = rot1 * vec3(0.0f, 1.0f, 0.0f);</code></div><div class="line number9 index8 alt2"><code class="cpp plain">quat rot2 = RotationBetweenVectors(newUp, desiredUp);</code></div></div></td></tr></tbody></table></div></div>
<p>组合到一起：Now, combine them:</p>
<div><div id="highlighter_432502" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">quat targetOrientation =&nbsp;rot2&nbsp;*&nbsp;rot1;&nbsp;</code><code class="cpp comments">//&nbsp;remember,&nbsp;in&nbsp;reverse&nbsp;order.</code></div></div></td></tr></tbody></table></div></div>
<p>注意，“direction”仅仅是direction方向，并非目标位置！你可以轻松计算出方向：targetPos – currentPos。Beware, “direction” is, well, a direction, not the target position ! But you can compute the direction simply: targetPos – currentPos.</p>
<p>得到目标朝向后，你很可能想对startOrientation和targetOrientation进行插值。Once you have this target orientation, you will probably want to interpolate between startOrientation and targetOrientation.</p>
<p>（可在common/quaternion_utils.cpp中找到此函数。）(You can find this function in common/quaternion_utils.cpp)</p>
<h2 id="How_do_I_use_LookAt__but_limit_the_rotation_at_a_certain_speed__">怎样使用LookAt且限制旋转速度？How do I use LookAt, but limit the rotation at a certain speed ?</h2>
<p>基本思想是采用SLERP（用glm::mix函数），但要控制插值的幅度，避免角度偏大。The basic idea is to do a SLERP ( = use glm::mix ), but play with the interpolation value so that the angle is not bigger than the desired value:</p>
<div><div id="highlighter_155405" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">mixFactor&nbsp;=&nbsp;maxAllowedAngle&nbsp;/ angleBetweenQuaternions;</code></div><div class="line number2 index1 alt1"><code class="cpp plain">quat&nbsp;result =&nbsp;glm::gtc::quaternion::mix(q1,&nbsp;q2,&nbsp;mixFactor);</code></div></div></td></tr></tbody></table></div></div>
<p>Here is a more complete implementation, which deals with many special cases. Note that it doesn’t use mix() directly as an optimization.</p>
<div><div id="highlighter_314224" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">quat&nbsp;RotateTowards(quat&nbsp;q1,&nbsp;quat&nbsp;q2,&nbsp;</code><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">maxAngle){</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code><code class="cpp plain">(&nbsp;maxAngle&nbsp;&lt;&nbsp;0.001f&nbsp;){</code></div><div class="line number4 index3 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;No&nbsp;rotation&nbsp;allowed.&nbsp;Prevent&nbsp;dividing&nbsp;by&nbsp;0&nbsp;later.</code></div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code>&nbsp;<code class="cpp plain">q1;</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">cosTheta&nbsp;=&nbsp;dot(q1,&nbsp;q2);</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;q1&nbsp;and&nbsp;q2&nbsp;are&nbsp;already&nbsp;equal.</code></div><div class="line number11 index10 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;Force&nbsp;q2&nbsp;just&nbsp;to&nbsp;be&nbsp;sure</code></div><div class="line number12 index11 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code><code class="cpp plain">(cosTheta&nbsp;&gt;&nbsp;0.9999f){</code></div><div class="line number13 index12 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code>&nbsp;<code class="cpp plain">q2;</code></div><div class="line number14 index13 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Avoid taking the long path around the sphere</code></div><div class="line number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code> <code class="cpp plain">(cosTheta &lt; 0){</code></div><div class="line number18 index17 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</code><code class="cpp plain">q1 = q1*-1.0f;</code></div><div class="line number19 index18 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</code><code class="cpp plain">cosTheta *= -1.0f;</code></div><div class="line number20 index19 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">angle&nbsp;=&nbsp;</code><code class="cpp functions bold">acos</code><code class="cpp plain">(cosTheta);</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;If&nbsp;there&nbsp;is&nbsp;only&nbsp;a&nbsp;2°&nbsp;difference,&nbsp;and&nbsp;we&nbsp;are&nbsp;allowed&nbsp;5°,</code></div><div class="line number25 index24 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">//&nbsp;then&nbsp;we&nbsp;arrived.</code></div><div class="line number26 index25 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code>&nbsp;<code class="cpp plain">(angle&nbsp;&lt;&nbsp;maxAngle){</code></div><div class="line number27 index26 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code>&nbsp;<code class="cpp plain">q2;</code></div><div class="line number28 index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">float</code>&nbsp;<code class="cpp plain">fT&nbsp;=&nbsp;maxAngle&nbsp;/&nbsp;angle;</code></div><div class="line number31 index30 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">angle&nbsp;=&nbsp;maxAngle;</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">quat&nbsp;res&nbsp;=&nbsp;(</code><code class="cpp functions bold">sin</code><code class="cpp plain">((1.0f&nbsp;-&nbsp;fT)&nbsp;*&nbsp;angle)&nbsp;*&nbsp;q1&nbsp;+&nbsp;</code><code class="cpp functions bold">sin</code><code class="cpp plain">(fT&nbsp;*&nbsp;angle)&nbsp;*&nbsp;q2)&nbsp;/&nbsp;</code><code class="cpp functions bold">sin</code><code class="cpp plain">(angle);</code></div><div class="line number34 index33 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">res&nbsp;=&nbsp;normalize(res);</code></div><div class="line number35 index34 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code>&nbsp;<code class="cpp plain">res;</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>可以这样用RotateTowards函数：You can use it like that:</p>
<div><div id="highlighter_497657" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">CurrentOrientation = RotateTowards(CurrentOrientation, TargetOrientation, 3.14f * deltaTime );</code></div></div></td></tr></tbody></table></div></div>
<p>（可在common/quaternion_utils.cpp中找到此函数）(You can find this function in common/quaternion_utils.cpp)</p>
<h2 id="How_do_I_">怎样……How do I…</h2>
<p>若有疑问，可e-mail联系我们。我们将把您的问题添加到此文中。If you can’t figure it out, drop us an email, and we’ll add it to the list !</p>
																	</div><!-- .entry-content -->
				</div><!-- #post-## -->

				
			<div id="comments">


	<p class="nocomments">Comments are closed.</p>


								
</div><!-- #comments -->


			</div><!-- #content -->
		</div><!-- #container -->

<div id="sideBar">
		<div id="primary" class="widget-area" role="complementary">
			<ul class="xoxo">

<li id="text-3" class="widget-container widget_text"><h3 class="widget-title">Staying tuned</h3>			<div class="textwidget"><ul>
<li class="page_item">
<a href="mailto:contact@opengl-tutorial.org?body=Hi%20!%20Did%20you%20read%20the%20FAQ%20?%20http://www.opengl-tutorial.org/miscellaneous/faq/">Drop us a word</a>
</li>
<li class="page_item">
<a href="http://www.opengl-tutorial.org/miscellaneous/faq/">FAQ</a>
</li>
<li class="page_item">
<a href="http://feeds.feedburner.com/Opengl-tutorialorg">
<img src="./Tutorial 17   Rotations   opengl-tutorial.org_files/feed-icon-14x14.png" alt="RSS Feed" title="RSS Feed">&nbsp; RSS
</a> 
</li>
<li class="page_item" <!--="" addthis="" button="" begin="" --="">
<div class="addthis_toolbox addthis_default_style ">
<a class="addthis_button_google_plusone at300b" g:plusone:count="false"><div style="position: absolute; width: 450px; left: -10000px;" id="___plusone_0"><iframe frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: absolute; top: -10000px; width: 450px; margin: 0px; border-style: none;" tabindex="0" vspace="0" width="100%" id="I0_1367550365585" name="I0_1367550365585" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/saved_resource.htm" allowtransparency="true" data-gapiattached="true"></iframe></div><g:plusone count="false" lang="null" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/" size="small" callback="_at_plusonecallback" data-gapiscan="true" data-onload="true" data-gapistub="true"></g:plusone></a>
<a class="addthis_button_preferred_1 addthis_button_facebook at300b" title="Facebook" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#"><span class="at16nc at300bs at15nc at15t_facebook at16t_facebook"><span class="at_a11y">Share on facebook</span></span></a>
<a class="addthis_button_preferred_2 addthis_button_twitter at300b" title="Tweet" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#"><span class="at16nc at300bs at15nc at15t_twitter at16t_twitter"><span class="at_a11y">Share on twitter</span></span></a>
<a class="addthis_button_preferred_3 addthis_button_email at300b" title="Email" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#"><span class="at16nc at300bs at15nc at15t_email at16t_email"><span class="at_a11y">Share on email</span></span></a>
<a class="addthis_button_preferred_4 addthis_button_print at300b" title="Print" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#"><span class="at16nc at300bs at15nc at15t_print at16t_print"><span class="at_a11y">Share on print</span></span></a>
<a class="addthis_button_compact at300m" href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#"><span class="at16nc at300bs at15nc at15t_compact at16t_compact"><span class="at_a11y">More Sharing Services</span></span></a>
<div class="atclear"></div></div>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/addthis_widget.js"></script>
<!-- AddThis Button END -->
</li>
</ul></div>
		</li><li id="search-2" class="widget-container widget_search"><h3 class="widget-title">Search</h3><form role="search" method="get" id="searchform" action="http://www.opengl-tutorial.org/">
	<div><label class="screen-reader-text" for="s">Search for:</label>
	<input type="text" value="" name="s" id="s">
	<input type="submit" id="searchsubmit" value="Search">
	</div>
	<input type="hidden" name="lang" value="en"></form></li><li id="language-selector" class="widget-container icl_languages_selector"><h3 class="widget-title">Languages</h3><div id="lang_sel">
    <ul>
        <li><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#" class="lang_sel_sel icl-en">
                            
            <img class="iclflag" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/en.png" alt="en">                                
            &nbsp;English</a>                    </li>
    </ul>    
</div>
</li>			</ul>
		</div><!-- #primary .widget-area -->


		<div id="secondary" class="widget-area" role="complementary">
			<ul class="xoxo">
				<li id="pages-4" class="widget-container widget_pages"><h3 class="widget-title">Tutorials</h3>		<ul>
			<li class="page_item page-item-138"><a href="http://www.opengl-tutorial.org/beginners-tutorials/">Basic OpenGL</a>
<ul class="children">
	<li class="page_item page-item-7"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-1-opening-a-window/">Tutorial 1 : Opening a window</a></li>
	<li class="page_item page-item-14"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-2-the-first-triangle/">Tutorial 2 : The first triangle</a></li>
	<li class="page_item page-item-19"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/">Tutorial 3 : Matrices</a></li>
	<li class="page_item page-item-82"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-4-a-colored-cube/">Tutorial 4 : A Colored Cube</a></li>
	<li class="page_item page-item-83"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-5-a-textured-cube/">Tutorial 5 : A Textured Cube</a></li>
	<li class="page_item page-item-170"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-6-keyboard-and-mouse/">Tutorial 6 : Keyboard and Mouse</a></li>
	<li class="page_item page-item-185"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-7-model-loading/">Tutorial 7 : Model loading</a></li>
	<li class="page_item page-item-198"><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-8-basic-shading/">Tutorial 8 : Basic shading</a></li>
</ul>
</li>
<li class="page_item page-item-200"><a href="http://www.opengl-tutorial.org/download/">Download</a></li>
<li class="page_item page-item-140 current_page_ancestor current_page_parent"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/">Intermediate Tutorials</a>
<ul class="children">
	<li class="page_item page-item-281"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-10-transparency/">Tutorial 10 : Transparency</a></li>
	<li class="page_item page-item-291"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-11-2d-text/">Tutorial 11 : 2D text</a></li>
	<li class="page_item page-item-323"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-12-opengl-extensions/">Tutorial 12 : OpenGL Extensions</a></li>
	<li class="page_item page-item-301"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/">Tutorial 13 : Normal Mapping</a></li>
	<li class="page_item page-item-311"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-14-render-to-texture/">Tutorial 14 : Render To Texture</a></li>
	<li class="page_item page-item-344"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-15-lightmaps/">Tutorial 15 : Lightmaps</a></li>
	<li class="page_item page-item-381"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/">Tutorial 16 : Shadow mapping</a></li>
	<li class="page_item page-item-569 current_page_item"><a href="./Tutorial 17   Rotations   opengl-tutorial.org_files/Tutorial 17   Rotations   opengl-tutorial.org.htm">Tutorial 17 : Rotations</a></li>
	<li class="page_item page-item-252"><a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-9-vbo-indexing/">Tutorial 9 : VBO Indexing</a></li>
</ul>
</li>
<li class="page_item page-item-167"><a href="http://www.opengl-tutorial.org/miscellaneous/">Miscellaneous</a>
<ul class="children">
	<li class="page_item page-item-436"><a href="http://www.opengl-tutorial.org/miscellaneous/an-fps-counter/">An FPS counter</a></li>
	<li class="page_item page-item-587"><a href="http://www.opengl-tutorial.org/miscellaneous/building-your-own-c-application/">Building your own C application</a></li>
	<li class="page_item page-item-526"><a href="http://www.opengl-tutorial.org/miscellaneous/faq/">FAQ</a></li>
	<li class="page_item page-item-209"><a href="http://www.opengl-tutorial.org/miscellaneous/math-cheatsheet/">Math Cheatsheet</a></li>
	<li class="page_item page-item-210"><a href="http://www.opengl-tutorial.org/miscellaneous/useful-tools-links/">Useful Tools &amp; Links</a></li>
</ul>
</li>
		</ul>
		</li>			</ul>
		</div><!-- #secondary .widget-area -->
</div>
	</div><!-- #main -->
</div>
	<div id="footer" role="contentinfo">
		<div id="colophon">


<div id="siteinfo">
                        <div id="contact">Remark ? Question ? Bug report ? Feel free to contact us at <a href="mailto:contact@opengl-tutorial.org">contact@opengl-tutorial.org</a>. But don't forget to read the <a href="http://www.opengl-tutorial.org/miscellaneous/faq/">FAQ</a> !</div>
			<div id="site-generator">
								<a href="http://codepuzzle.net/?page_id=109" title="Semantic Personal Publishing Platform" rel="generator">Celine Theme Proudly powered by WordPress.</a>
			</div><!-- #site-generator -->
</div>
		</div><!-- #colophon -->
	</div><!-- #footer -->

<!-- #wrapper -->

<p class="lmf_generated_text">Site last updated April 30, 2013; Page last updated January 8, 2013</p><script type="text/javascript">
  SyntaxHighlighter.autoloader(
      'applescript            http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushAppleScript.js',
      'actionscript3 as3      http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushAS3.js',
      'bash shell             http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushBash.js',
      'coldfusion cf          http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushColdFusion.js',
      'cpp c                  http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushCpp.js',
      'c# c-sharp csharp      http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushCSharp.js',
      'css                    http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushCss.js',
      'delphi pascal          http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushDelphi.js',
      'diff patch pas         http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushDiff.js',
      'erl erlang             http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushErlang.js',
      'groovy                 http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushGroovy.js',
      'java                   http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushJava.js',
      'jfx javafx             http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushJavaFX.js',
      'js jscript javascript  http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushJScript.js',
      'objc obj-c             http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushObjectiveC.js',
      'perl pl                http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushPerl.js',
      'php                    http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushPhp.js',
      'text plain             http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushPlain.js',
      'py python              http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushPython.js',
      'ruby rails ror rb      http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushRuby.js',
      'sass scss              http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushSass.js',
      'scala                  http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushScala.js',
      'sql                    http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushSql.js',
      'vb vbnet               http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushVb.js',
      'xml xhtml xslt html    http://www.opengl-tutorial.org/wp-content/plugins/syntax-highlighter-mt/scripts/shBrushXml.js'
       );
	SyntaxHighlighter.all();
</script>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/jquery.ui.core.min.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var thickboxL10n = {"next":"Next >","prev":"< Prev","image":"Image","of":"of","close":"Close","noiframes":"This feature requires inline frames. You have iframes disabled or your browser does not support them.","loadingAnimation":"http:\/\/www.opengl-tutorial.org\/wp-includes\/js\/thickbox\/loadingAnimation.gif","closeImage":"http:\/\/www.opengl-tutorial.org\/wp-includes\/js\/thickbox\/tb-close.png"};
/* ]]> */
</script>
<script type="text/javascript" src="./Tutorial 17   Rotations   opengl-tutorial.org_files/thickbox.js"></script>
<p id="wpml_credit_footer"><a href="http://wpml.org/">Multilingual WordPress</a> by <a href="http://www.icanlocalize.com/site/">ICanLocalize</a></p>

</body></html>